@{
    ViewData["Title"] = "2D 繞弧輪播";
}

<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D 繞弧輪播</title>
    <link rel="stylesheet" href="@Url.Content("~/Content/site2.css")" />
    <style>
        /* 左上角 */
        .title-img-left {
            position: fixed;
            top: 180px;
            left: 20px;
            max-width: 250px;
            height: auto;
            z-index: 999;
            pointer-events: none; /* 不影響滑鼠拖曳 */
        }

        /* 右上角 */
        .title-img-right {
            position: fixed;
            top: 100px;
            right: 20px;
            max-width: 400px;
            height: auto;
            z-index: 999;
            pointer-events: none;
        }

        /* 下方中央 */
        .bottom-area {
            position: fixed;
            bottom: 20px;
            width: 100%;
            text-align: center;
            z-index: 999;
        }

        .title-img-bottom {
            max-width: 550px;
            height: auto;
        }

        .bottom-buttons {
            margin-top: 10px; /* 按鈕與 title03 間距 */
            display: flex;
            justify-content: center;
            gap: 30px; /* 左右按鈕間距 */
        }

            .bottom-buttons button {
                background: transparent;
                border: none;
                cursor: pointer;
                padding: 0;
            }

                .bottom-buttons button img {
                    width: 50px;
                    height: 50px;
                    opacity: 0.8;
                    transition: opacity 0.3s;
                }

                    .bottom-buttons button img:hover {
                        opacity: 1;
                    }
    </style>
</head>
<body>
    <!-- 左上角 -->
    <img src="@Url.Content("~/IMAGES/Buttons/Title01.png")" class="title-img-left" />

    <!-- 右上角 -->
    <img src="@Url.Content("~/IMAGES/Buttons/Title02.png")" class="title-img-right" />

    <!-- 下方中央 -->
    <div class="bottom-area">
        <img src="@Url.Content("~/IMAGES/Buttons/Title03.png")" class="title-img-bottom" />
        <div class="bottom-buttons">
            <button id="lastone">
                <img src="@Url.Content("~/IMAGES/Buttons/LGS_B.png")" />
            </button>
            <button id="nextone">
                <img src="@Url.Content("~/IMAGES/Buttons/RGS_B.png")" />
            </button>
        </div>
    </div>
    <div class="carousel-wrapper">
        <div class="carousel" id="carousel">
            @for (int i = 1; i <= 5; i++)
            {
                <img src="@Url.Content($"~/IMAGES/Pineapple/PA_F0{i}.png")" class="carousel-img" />
            }
            @for (int i = 1; i <= 5; i++)
            {
                <img src="@Url.Content($"~/IMAGES/Pineapple/PA_F0{i}.png")" class="carousel-img" style="opacity: 0;" />
            }
        </div>
    </div>
    <script>
        const track = document.getElementById('carousel');
        const imgs = Array.from(track.children);
        const totalImgs = imgs.length; // 10
        const visibleCount = 5;
        let currentStartIndex = 0;
        let isAnimating = false;

        //function updateCarousel() {

        //    const radius = 500;
        //    const angleStep = Math.PI / 6;
        //    const scaleStep = 0.08;

        //    imgs.forEach((img, i) => {
        //        const relativeIndex = (i - currentStartIndex + totalImgs) % totalImgs;

        //        if (relativeIndex < visibleCount) {
        //            const baseIndex = relativeIndex - 2; // -2 ~ +2
        //            const angle = baseIndex * angleStep;
        //            const x = Math.sin(angle) * radius;
        //            const z = Math.cos(angle) * radius;
        //            const scale = 1 - Math.abs(baseIndex) * scaleStep;

        //            // 判斷 rotateY 使用哪個角度
        //            let rotateY;
        //            if (relativeIndex === 0) {
        //                // 最左邊跟左邊第二張同角度
        //                rotateY = -(-1 * angleStep) * (180 / Math.PI);  // same as relativeIndex==1
        //            } else if (relativeIndex === visibleCount - 1) {
        //                // 最右邊跟右邊第二張同角度
        //                rotateY = -(1 * angleStep) * (180 / Math.PI);  // same as relativeIndex==3
        //            } else {
        //                rotateY = -angle * (180 / Math.PI);
        //            }

        //            img.style.opacity = 1;
        //            img.style.zIndex = 100 - Math.abs(baseIndex);
        //            img.style.transform = `
        //        translateX(${x}px)
        //        translateZ(${-z}px)
        //        scale(${scale})
        //        rotateY(${rotateY}deg)
        //    `;
        //        } else {
        //            img.style.opacity = 0;
        //            img.style.zIndex = 0;
        //            img.style.transform = 'translateZ(-2000px) scale(0.5)';
        //        }
        //    });
        //}
        function updateCarousel() {
            const radius = 500;
            const angleStep = Math.PI / 6;
            const scaleStep = 0.08;
            const yAmplitude = 100; // ⭐️ 調整這個值控制「垂直 U 曲線」程度
            const skewAngle = 10;  // 傾斜角度，正負用來控制方向

            imgs.forEach((img, i) => {
                const relativeIndex = (i - currentStartIndex + totalImgs) % totalImgs;

                if (relativeIndex < visibleCount) {
                    const baseIndex = relativeIndex - 2;
                    const angle = baseIndex * angleStep;
                    const x = Math.sin(angle) * radius;
                    const z = Math.cos(angle) * radius;
                    const y = Math.cos(angle) * yAmplitude - yAmplitude;
                    const scale = 1 - Math.abs(baseIndex) * scaleStep;

                    let rotateY;
                    if (relativeIndex === 0) {
                        rotateY = -(-1 * angleStep) * (180 / Math.PI);
                    } else if (relativeIndex === visibleCount - 1) {
                        rotateY = -(1 * angleStep) * (180 / Math.PI);
                    } else {
                        rotateY = -angle * (180 / Math.PI);
                    }

                    // 根據 baseIndex 判斷 skewY 方向
                    let skewYAngle = 0;
                    if (baseIndex < 0) {
                        skewYAngle = -skewAngle;  // 左邊斜向正常方向
                    } else if (baseIndex > 0) {
                        skewYAngle = skewAngle;   // 右邊斜向倒過來方向
                    } else {
                        skewYAngle = 0;           // 中間不斜
                    }

                    img.style.opacity = 1;
                    img.style.zIndex = 100 - Math.abs(baseIndex);
                    img.style.transform = `
                translateX(${x}px)
                 translateY(${y}px)
                translateZ(${-z}px)
                scale(${scale})
                rotateY(${rotateY}deg)
                skewY(${skewYAngle}deg)
            `;
                } else {
                    img.style.opacity = 0;
                    img.style.zIndex = 0;
                    img.style.transform = 'translateZ(-2000px) scale(0.5)';
                }
            });
        }



        function handleNext() {
            if (isAnimating) return;
            isAnimating = true;

            currentStartIndex = (currentStartIndex + 1) % totalImgs;
            updateCarousel();

            setTimeout(() => isAnimating = false, 600);
        }

        function handlePrev() {
            if (isAnimating) return;
            isAnimating = true;

            currentStartIndex = (currentStartIndex - 1 + totalImgs) % totalImgs;
            updateCarousel();

            setTimeout(() => isAnimating = false, 600);
        }

        document.getElementById('nextone').addEventListener('click', handleNext);
        document.getElementById('lastone').addEventListener('click', handlePrev);

        updateCarousel();
    </script>

</body>
</html>
